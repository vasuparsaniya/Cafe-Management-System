{"version":3,"sources":["./src/app/shared/global-constants.ts","./src/app/best-seller/best-seller.component.ts","./src/app/best-seller/best-seller.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/shared/accordion/accordion.directive.ts","./src/app/shared/accordion/accordionlink.directive.ts","./src/app/shared/menu-items.ts","./src/app/material-component/dialog/change-password/change-password.component.ts","./src/app/material-component/dialog/change-password/change-password.component.html","./src/app/shared/accordion/index.ts","./src/app/layouts/full/sidebar/sidebar.component.ts","./src/app/layouts/full/sidebar/sidebar.component.html","./src/app/shared/shared.module.ts","./src/app/layouts/full/full.component.ts","./src/app/layouts/full/full.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/material-component/dialog/confirmation/confirmation.component.ts","./src/app/material-component/dialog/confirmation/confirmation.component.html","./src/app/forgot-password/forgot-password.component.ts","./src/app/forgot-password/forgot-password.component.html","./src/app/app.module.ts","./src/app/services/auth.service.ts","./src/app/services/token.interceptor.ts","./src/app/services/route-guard.service.ts","./src/app/services/snackbar.service.ts","./src/app/shared/material-module.ts","./src/app/services/user.service.ts","./src/app/signup/signup.component.ts","./src/app/signup/signup.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/layouts/full/header/header.component.ts","./src/app/layouts/full/header/header.component.html","./src/app/shared/accordion/accordionanchor.directive.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class GlobalConstants {\n\n  //Message\n  public static genericError: string = \"Something Went Wrong. Please try again later.\";\n\n  public static unauthorized: string = \"You are unauthorized person to access this page\";\n\n  public static productExistError:string = \"Product already exist\"\n\n  public static productAdded:string = \"Product added successfully\"\n\n  //Regex\n  public static nameRegex: string = \"[a-zA-Z0-9]*\";\n\n  public static emailRegex = \"[A-Za-z0-9._%-]+@[A-Za-z0-9._%-]+\\\\.[a-z]{2,3}\";\n\n  public static contactNumberRegex = \"^[e0-9]{10,10}$\";\n\n  //variable\n  public static error: string = \"error\";\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-best-seller',\n  templateUrl: './best-seller.component.html',\n  styleUrls: ['./best-seller.component.scss']\n})\nexport class BestSellerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<section class=\"page-section\" id=\"about\">\n    <div class=\"container\">\n        <div class=\"text-center\">\n            <h2 class=\"section-heading text-uppercase\">Best Seller</h2>\n        </div>\n        <ul class=\"timeline\">\n            <li><a href=\"../../assets/img/1.jpg\" target=\"_blank\">\n                    <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"../../assets/img/1.jpg\"\n                            alt=\"...\" /></div>\n                </a>\n                <div class=\"timeline-panel\">\n                    <div class=\"timeline-heading\">\n                        <h4>Pizza</h4>\n                    </div>\n                    <div class=\"timeline-body\">\n                        <p class=\"text-muted\">Pizza is an Italian dish consisting of a usually round, flattened base of\n                            leavened wheat-based dough topped with tomatoes, cheese, and often various other\n                            ingredients, which is then baked at a high temperature, traditionally in a wood-fired oven.\n                            A small pizza is sometimes called a pizzetta.</p>\n                    </div>\n                </div>\n            </li>\n            <li class=\"timeline-inverted\">\n                <a href=\"../../assets/img/2.jpg\" target=\"_blank\">\n                    <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"../../assets/img/2.jpg\"\n                            alt=\"...\" /></div>\n                </a>\n                <div class=\"timeline-panel\">\n                    <div class=\"timeline-heading\">\n                        <h4>Biryani</h4>\n                    </div>\n                    <div class=\"timeline-body\">\n                        <p class=\"text-muted\">Biryani is a mixed rice dish. It is made with Indian spices, rice, and\n                            meat usually that of chicken, fish, and sometimes, in addition, eggs or vegetables such as\n                            potatoes in certain regional varieties.</p>\n                    </div>\n                </div>\n            </li>\n            <li>\n                <a href=\"../../assets/img/3.jpg\" target=\"_blank\">\n                    <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"../../assets/img/3.jpg\"\n                            alt=\"...\" /></div>\n                </a>\n                <div class=\"timeline-panel\">\n                    <div class=\"timeline-heading\">\n                        <h4>Pasta</h4>\n                    </div>\n                    <div class=\"timeline-body\">\n                        <p class=\"text-muted\">Pasta is a type of food typically made from an unleavened dough of wheat\n                            flour mixed with water or eggs, and formed into sheets or other shapes, then cooked by\n                            boiling or baking.</p>\n                    </div>\n                </div>\n            </li>\n            <li class=\"timeline-inverted\">\n                <a href=\"../../assets/img/4.jpg\" target=\"_blank\">\n                    <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"../../assets/img/4.jpg\"\n                            alt=\"...\" /></div>\n                </a>\n                <div class=\"timeline-panel\">\n                    <div class=\"timeline-heading\">\n                        <h4>Molten chocolate cake</h4>\n                    </div>\n                    <div class=\"timeline-body\">\n                        <p class=\"text-muted\">Molten chocolate cake is a popular dessert that combines the elements of a\n                            chocolate cake and a soufflé. Its name derives from the dessert's liquid chocolate center,\n                            and it is also known as chocolate moelleux, chocolate lava cake, or simply lava cake.</p>\n                    </div>\n                </div>\n            </li>\n            <li class=\"timeline-inverted\">\n                <div class=\"timeline-image\">\n                    <h4>\n                        Be Part\n                        <br />\n                        Of Our\n                        <br />\n                        Cafe!\n                    </h4>\n                </div>\n            </li>\n        </ul>\n    </div>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { SignupComponent } from '../signup/signup.component';\nimport { ForgotPasswordComponent } from '../forgot-password/forgot-password.component';\nimport { LoginComponent } from '../login/login.component';\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(private dialog:MatDialog,\n    private router:Router,\n    private userService:UserService) { }\n\n  ngOnInit(): void {\n    if(localStorage.getItem('token') != null){\n      this.userService.checkToken().subscribe((response:any)=>{\n      this.router.navigate(['/cafe/dashboard']);\n    },(error:any)=>{\n      console.log(error);\n    });\n    }\n  }\n\n  signupAction(){\n    // console.log(\"Test\");\n    const dialogConfig = new MatDialogConfig();\n\n    //set the size of the dialog\n\n    dialogConfig.width = \"550px\";\n    this.dialog.open(SignupComponent,dialogConfig);\n  }\n\n  forgotPasswordAction(){\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.width = \"550px\";\n    this.dialog.open(ForgotPasswordComponent,dialogConfig);\n  }\n\n  loginAction(){\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.width = \"550px\";\n    this.dialog.open(LoginComponent,dialogConfig);\n  }\n}\n","<div class=\"bg-image\"></div>\n<app-best-seller></app-best-seller>\n\n<div class=\"wrapper sticky\">\n  <nav class=\"navbar-fixed-top\">\n    <a href=\"#\" class=\"logo\">\n      <mat-icon>storefront</mat-icon> Cafe Management System\n    </a>\n    <ul>\n      <li><a (click)=\"loginAction()\">Login</a></li>\n      <li><a (click)=\"signupAction()\">Signup</a></li>     <!-- signupAction method -->\n      <li><a (click)=\"forgotPasswordAction()\">Forgot Password</a></li>\n    </ul>\n  </nav>\n</div>\n<div class=\"footer\" id=\"signup\">\n  <h2>All right reserved @Vasu Parsaniya</h2>\n</div>\n","export const environment = {\n  production: false,\n  apiUrl: 'https://cafe-management-system.onrender.com'\n  // apiUrl: 'https://cafe-management-system-backend.onrender.com'\n};\n","import {\n  Directive,\n  OnInit,\n  AfterViewInit,\n  AfterContentChecked\n} from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { AccordionLinkDirective } from './accordionlink.directive';\nimport { filter } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appAccordion]'\n})\nexport class AccordionDirective implements AfterContentChecked {\n  protected navlinks: Array<AccordionLinkDirective> = [];\n\n  closeOtherLinks(selectedLink: AccordionLinkDirective): void {\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\n      if (link !== selectedLink) {\n        link.selected = false;\n      }\n    });\n  }\n\n  addLink(link: AccordionLinkDirective): void {\n    this.navlinks.push(link);\n  }\n\n  removeGroup(link: AccordionLinkDirective): void {\n    const index = this.navlinks.indexOf(link);\n    if (index !== -1) {\n      this.navlinks.splice(index, 1);\n    }\n  }\n\n  checkOpenLinks() {\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\n      if (link.group) {\n        const routeUrl = this.router.url;\n        const currentUrl = routeUrl.split('/');\n        if (currentUrl.indexOf(link.group) > 0) {\n          link.selected = true;\n          this.closeOtherLinks(link);\n        }\n      }\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(e => this.checkOpenLinks());\n  }\n\n  constructor(private router: Router) {\n    setTimeout(() => this.checkOpenLinks());\n  }\n}\n","import {\n  Directive,\n  HostBinding,\n  Inject,\n  Input,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { AccordionDirective } from './accordion.directive';\n\n@Directive({\n  selector: '[appAccordionLink]'\n})\nexport class AccordionLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  public group: any;\n\n  @HostBinding('class.selected')\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  set selected(value: boolean) {\n    this._selected = value;\n    if (value) {\n      this.nav.closeOtherLinks(this);\n    }\n  }\n\n  protected _selected: boolean=false;\n  protected nav: AccordionDirective;\n\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\n    this.nav = nav;\n  }\n\n  ngOnInit(): any {\n    this.nav.addLink(this);\n  }\n\n  ngOnDestroy(): any {\n    this.nav.removeGroup(this);\n  }\n\n  toggle(): any {\n    this.selected = !this.selected;\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nexport interface Menu {\n  state: string;\n  name: string;\n  icon: string;\n  role: string;\n}\n\nconst MENUITEMS = [\n  { state: 'dashboard', name: 'Dashboard', icon: 'dashboard', role: '' },\n  { state: 'category', name: 'Manage Category', icon: 'category', role: 'admin' },\n  { state: 'product', name: 'Manage Product', icon: 'inventory_2', role: 'admin' },\n  { state: 'order', name: 'Manage Order', icon: 'list_alt', role: '' },\n  { state: 'bill', name: 'View Bill', icon: 'import_contacts', role: '' },\n  { state: 'user', name: 'View User', icon: 'people', role: 'admin' }\n];\n\n@Injectable()\nexport class MenuItems {\n  getMenuitem(): Menu[] {\n    return MENUITEMS;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from 'src/app/services/snackbar.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  changePasswordForm:any = FormGroup;\n  responseMessage:any;\n\n  constructor(private formBuilder:FormBuilder,\n    private userService:UserService,\n    public dialogRef:MatDialogRef<ChangePasswordComponent>,\n    private ngxService:NgxUiLoaderService,\n    private snackbarService:SnackbarService) { }\n\n\n  ngOnInit(): void {\n    this.changePasswordForm = this.formBuilder.group({\n      oldPassword:[null,[Validators.required]],\n      newPassword:[null,[Validators.required]],\n      confirmPassword:[null,[Validators.required]],\n    })\n  }\n\n  validateSubmit(){\n    if(this.changePasswordForm.controls['newPassword'].value != this.changePasswordForm.controls['confirmPassword'].value){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n\n  handleChangePasswordSubmit(){\n    this.ngxService.start();\n    var formData = this.changePasswordForm.value;\n    var data = {\n      oldPassword:formData.oldPassword,\n      newPassword:formData.newPassword,\n      confirmPassword:formData.confirmPassword\n    }\n\n    //now this data pass to API\n    this.userService.changePassword(data).subscribe((response:any)=>{\n      this.ngxService.stop();\n      this.responseMessage = response?.message;\n      this.dialogRef.close();\n      this.snackbarService.openSnackBar(this.responseMessage,\"success\");\n    },(error)=>{\n      console.log(error);\n      this.ngxService.stop();\n      if(error.error?.message){\n        this.responseMessage = error.error?.message;\n      }\n      else{\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.snackbarService.openSnackBar(this.responseMessage,GlobalConstants.error);\n    })\n  }\n\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxLayout=\"row\">\n    <span class=\"title-center\">Change Password</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content>\n  <form [formGroup]=\"changePasswordForm\">\n    <div fxFlex fxLayout=\"column\">\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Old Password</mat-label>\n        <input matInput formControlName=\"oldPassword\" type=\"password\" required>\n        <mat-error *ngIf=\"changePasswordForm.controls.oldPassword.touched && changePasswordForm.controls.oldPassword.invalid\">\n          <span *ngIf=\"changePasswordForm.controls.oldPassword.error?.required\">This field is mandatory.</span>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>New Password</mat-label>\n        <input matInput formControlName=\"newPassword\" type=\"password\" required>\n        <mat-error *ngIf=\"changePasswordForm.controls.newPassword.touched && changePasswordForm.controls.newPassword.invalid\">\n          <span *ngIf=\"changePasswordForm.controls.newPassword.error?.required\">This field is mandatory.</span>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Confirm Password</mat-label>\n        <input matInput formControlName=\"confirmPassword\" type=\"password\" required>\n        <mat-error *ngIf=\"changePasswordForm.controls.confirmPassword.touched && changePasswordForm.controls.confirmPassword.invalid\">\n          <span *ngIf=\"changePasswordForm.controls.confirmPassword.error?.required\">This field is mandatory.</span>\n        </mat-error>\n        <mat-hint *ngIf=\"validateSubmit() && !(changePasswordForm.controls.confirmPassword.invalid)\">\n          <span>New Password & Confirm Password does not match</span>\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"handleChangePasswordSubmit()\"\n  [disabled]=\"validateSubmit() || !(changePasswordForm.valid && changePasswordForm.dirty)\">Update</button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","export * from './accordionanchor.directive';\nexport * from './accordionlink.directive';\nexport * from './accordion.directive';\n","import { ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport jwt_decode from \"jwt-decode\";                                      //--------------------\nimport { MenuItems } from 'src/app/shared/menu-items';\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: []\n})\nexport class AppSidebarComponent implements OnDestroy {\n  mobileQuery: MediaQueryList;\n  token:any = localStorage.getItem('token');                                  //-------------\n  tokenPayload:any;                                                          //------------\n\n  private _mobileQueryListener: () => void;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    media: MediaMatcher,\n    public menuItems:MenuItems                                       //-----------------\n  ) {\n    this.tokenPayload = jwt_decode(this.token);                      //----------------\n\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this._mobileQueryListener);\n  }\n\n  ngOnDestroy(): void {\n    this.mobileQuery.removeListener(this._mobileQueryListener);\n  }\n}\n","<mat-nav-list appAccordion>\n  <mat-list-item appAccordionLink *ngFor=\"let menuitem of menuItems.getMenuitem()\" routerLinkActive=\"selected\" group=\"{{menuitem.state}}\">\n    <a appAccordionToggle [routerLink]=\"['/cafe',menuitem.state]\" *ngIf=\"(menuitem.role === '' || menuitem.role === tokenPayload.role)\">\n      <mat-icon>{{menuitem.icon}}</mat-icon>\n      <span>{{menuitem.name}}</span>\n      <span fxFlex></span>\n    </a>\n  </mat-list-item>\n</mat-nav-list>\n","import { NgModule } from '@angular/core';\n\nimport { AccordionAnchorDirective, AccordionLinkDirective, AccordionDirective } from './accordion';\nimport { MenuItems } from './menu-items';\n\n\n@NgModule({\n  declarations: [\n    AccordionAnchorDirective,\n    AccordionLinkDirective,\n    AccordionDirective\n  ],\n  exports: [\n    AccordionAnchorDirective,\n    AccordionLinkDirective,\n    AccordionDirective\n   ],\n  providers: [ MenuItems]\n})\nexport class SharedModule { }\n","import { MediaMatcher } from '@angular/cdk/layout';\nimport { ChangeDetectorRef, Component, OnDestroy, AfterViewInit } from '@angular/core';\n\n\n/** @title Responsive sidenav */\n@Component({\n  selector: 'app-full-layout',\n  templateUrl: 'full.component.html',\n  styleUrls: []\n})\nexport class FullComponent implements OnDestroy, AfterViewInit {\n  mobileQuery: MediaQueryList;\n\n  private _mobileQueryListener: () => void;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    media: MediaMatcher\n  ) {\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this._mobileQueryListener);\n  }\n\n  ngOnDestroy(): void {\n    this.mobileQuery.removeListener(this._mobileQueryListener);\n  }\n  ngAfterViewInit() { }\n}\n","<div class=\"main-container\">\n    <mat-toolbar color=\"primary\" class=\"topbar telative\">\n        <div class=\"navbar-header\">\n            <button mat-icon-button (click)=\"snav.toggle()\" value=\"sidebarclosed\" style=\"vertical-align: bottom;\">\n                <mat-icon>menu</mat-icon>\n            </button><b>\n                <span style=\"vertical-align: middle;\">\n                    <mat-icon>storefront</mat-icon>\n                </span>\n            </b>\n            <span fxShow=\"false\" fxShow.gt-xs>\n                Cafe Management System\n            </span>\n        </div>\n        <span fxFlex></span>\n        <app-header></app-header>\n    </mat-toolbar>\n    <mat-sidenav-container class=\"example-sidenav-container\" [style.marginTop.px]=\"mobileQuery.matches ? 0 : 0\">\n        <mat-sidenav #snav id=\"snav\" class=\"dark-sidebar pl-xs\" [mode]=\"mobileQuery.matches ? 'side' : 'over'\"\n            fixedTopGap=\"0\" [opened]=\"mobileQuery.matches\" [disableClose]=\"mobileQuery.matches\">\n            <app-sidebar></app-sidebar>\n        </mat-sidenav>\n        <mat-sidenav-content class=\"page-wrapper\">\n            <div class=\"page-content\">\n                <router-outlet></router-outlet>\n            </div>\n        </mat-sidenav-content>\n    </mat-sidenav-container>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Frontend';\n}\n","<router-outlet></router-outlet>\n<ngx-ui-loader></ngx-ui-loader>\n","import { Component, OnInit, EventEmitter, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirmation',\n  templateUrl: './confirmation.component.html',\n  styleUrls: ['./confirmation.component.scss']\n})\nexport class ConfirmationComponent implements OnInit {\n\n  onEmitStatusChange = new EventEmitter();\n\n  details:any = {};\n\n  constructor(@Inject(MAT_DIALOG_DATA) public dialogData:any) { }\n\n  ngOnInit(): void {\n    if(this.dialogData){\n      this.details = this.dialogData;\n    }\n  }\n\n  handleChangeAction(){\n\n    this.onEmitStatusChange.emit();   //if selected yes then move forther\n  }\n\n}\n","<mat-dialog-content class=\"mat-typography\">\n  <h5>Are you sure to {{details.message}} ?</h5>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-raised-button color=\"primary\" (click)=\"handleChangeAction()\">Yes</button>\n  <button mat-raised-button mat-dialog-close>No</button>\n</mat-dialog-actions>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../services/user.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPasswordForm:any = FormGroup;\n  responseMessage : any;\n\n  constructor(private formBuilder:FormBuilder,\n    private userService:UserService,\n    private dialogRef:MatDialogRef<ForgotPasswordComponent>,\n    private ngxService:NgxUiLoaderService,\n    private snackbarServices:SnackbarService) { }\n\n  ngOnInit(): void {\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: [null,[Validators.required,Validators.pattern(GlobalConstants.emailRegex)]]\n    });\n  }\n\n  handleSubmit(){\n    this.ngxService.start();\n    var formData = this.forgotPasswordForm.value;\n    var data = {\n      email: formData.email\n    }\n    this.userService.forgotPassword(data).subscribe((response:any)=>{\n      this.ngxService.stop();   //loader stop\n      this.responseMessage = response?.message;   //arive from server side\n      this.dialogRef.close();\n      this.snackbarServices.openSnackBar(this.responseMessage,\"\");\n    },(error)=>{\n      this.ngxService.stop();\n      if(error.error?.message){\n        this.responseMessage = error.error.message;\n      }\n      else{\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.snackbarServices.openSnackBar(this.responseMessage,GlobalConstants.error);\n    })\n  }\n\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row flexLayout=\"row\">\n    <span class=\"title-center\">Forgot Password</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"forgotPasswordForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" required>\n        <mat-error *ngIf=\"forgotPasswordForm.controls.email.touched && forgotPasswordForm.controls.email.invalid\">\n          <span *ngIf=\"forgotPasswordForm.controls.email.errors.required\">This field is mandatory</span>\n          <span *ngIf=\"forgotPasswordForm.controls.email.errors.pattern\">This field is invalid</span>\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button mat-raised-button color=\"primary\"  type=\"submit\" (click)=\"handleSubmit()\"\n  [disabled]=\"!(forgotPasswordForm.valid && forgotPasswordForm.dirty)\">Send Password</button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './shared/material-module';\nimport { HomeComponent } from './home/home.component';\nimport { BestSellerComponent } from './best-seller/best-seller.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SharedModule } from './shared/shared.module';\nimport { FullComponent } from './layouts/full/full.component';\nimport { AppHeaderComponent } from './layouts/full/header/header.component';\nimport { AppSidebarComponent } from './layouts/full/sidebar/sidebar.component';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { SignupComponent } from './signup/signup.component';\nimport { NgxUiLoaderModule,NgxUiLoaderConfig,SPINNER,PB_DIRECTION } from 'ngx-ui-loader';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { TokenInterceptor } from './services/token.interceptor';\n\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n\nconst ngxUiLoaderConfig: NgxUiLoaderConfig = {\n  text:\"Loading....\",\n  textColor:\"#FFFFFF\",\n  pbColor:\"red\",\n  bgsColor:\"red\",\n  fgsColor:\"red\",\n  fgsType: SPINNER.ballSpinClockwise,\n  fgsSize:100,\n  pbDirection:PB_DIRECTION.leftToRight,\n  pbThickness:5\n}\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    BestSellerComponent,\n    FullComponent,\n    AppHeaderComponent,\n    AppSidebarComponent,\n    SignupComponent,\n    ForgotPasswordComponent,\n    LoginComponent\n   ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    SharedModule,\n    HttpClientModule,\n    NgxUiLoaderModule.forRoot(ngxUiLoaderConfig)\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\n    { provide: LocationStrategy, useClass: HashLocationStrategy }\n  ],\n  // providers: [HttpClientModule,{provide:HTTP_INTERCEPTORS,useClass:TokenInterceptor,multi:true}],\n  // providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private router:Router) { }\n\n  public isAuthenticated(): boolean {\n\n    const token = localStorage.getItem('token');\n\n    if(!token){\n      this.router.navigate(['/']);  //navigate to home page\n      return false;\n    }\n    else{\n      return true;\n    }\n}\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n\n  constructor(private router:Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = localStorage.getItem('token');\n    if(token){\n      request = request.clone({\n        setHeaders:{Authorization: `Bearer ${token}`}\n      });\n    }\n    return next.handle(request).pipe(\n      catchError((err)=>{\n        if(err instanceof HttpErrorResponse){\n          console.log(err.url);\n          if(err.status === 401 || err.status === 403){\n            if(this.router.url === '/'){}\n            else{\n              localStorage.clear();\n              this.router.navigate(['/']);   //navigate to the home page\n            }\n          }\n        }\n        return throwError(err);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { SnackbarService } from './snackbar.service';\nimport jwt_decode from \"jwt-decode\";\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteGuardService {\n\n  constructor(public auth: AuthService,\n    public router: Router,\n    private snackbarService: SnackbarService) { }\n\n  //method\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    let expectedRoleArray = route.data;  //store the role of user\n\n    expectedRoleArray = expectedRoleArray.expectedRole;\n\n    const token: any = localStorage.getItem('token');\n    var tokenPayload: any;\n\n    try {\n      tokenPayload = jwt_decode(token);   //take data from jwt token\n    }\n    catch (err) {\n      localStorage.clear();\n      this.router.navigate(['/']);   //navigate to home page\n    }\n\n    //checkRole\n\n    let checkRole = false;\n\n    for (let i = 0; i < expectedRoleArray.length; i++) {\n      if (expectedRoleArray[i] == tokenPayload.role) {\n        checkRole = true;\n      }\n    }\n\n    if (tokenPayload.role == 'user' || tokenPayload.role == 'admin') {\n      if (this.auth.isAuthenticated() && checkRole) {\n        return true;\n      }\n      this.snackbarService.openSnackBar(GlobalConstants.unauthorized, GlobalConstants.error)\n      this.router.navigate(['/cafe/dashboard']);\n      return false;\n    }\n    else {\n      this.router.navigate(['/']);  //navigate to home page\n      localStorage.clear();\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  constructor(private snackbar:MatSnackBar) { }     //snackbar is object\n\n  openSnackBar(message:string, action:string){\n    if(action === 'error'){\n      this.snackbar.open(message,'',{\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        duration: 2000,\n        panelClass: ['black-snackbar']    //this is taken from style.scss file\n      });\n    }\n    else{\n      this.snackbar.open(message,'',{\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        duration: 2000,\n        panelClass: ['green-snackbar']  //this is taken from style.scss file\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n import { NgModule } from '@angular/core';\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\n import { MatButtonModule } from '@angular/material/button';\n import { MatButtonToggleModule } from '@angular/material/button-toggle';\n import { MatCardModule } from '@angular/material/card';\n import { MatCheckboxModule } from '@angular/material/checkbox';\n import { MatChipsModule } from '@angular/material/chips';\n import { MatDatepickerModule } from '@angular/material/datepicker';\n import { MatDialogModule } from '@angular/material/dialog';\n import { MatExpansionModule } from '@angular/material/expansion';\n import { MatFormFieldModule } from '@angular/material/form-field';\n import { MatGridListModule } from '@angular/material/grid-list';\n import { MatIconModule } from '@angular/material/icon';\n import { MatInputModule } from '@angular/material/input';\n import { MatListModule } from '@angular/material/list';\n import { MatMenuModule } from '@angular/material/menu';\n import { MatPaginatorModule } from '@angular/material/paginator';\n import { MatProgressBarModule } from '@angular/material/progress-bar';\n import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n import { MatRadioModule } from '@angular/material/radio';\n import { MatSelectModule } from '@angular/material/select';\n import { MatSidenavModule } from '@angular/material/sidenav';\n import { MatSliderModule } from '@angular/material/slider';\n import { MatSlideToggleModule } from '@angular/material/slide-toggle';\n import { MatSnackBarModule } from '@angular/material/snack-bar';\n import { MatSortModule } from '@angular/material/sort';\n import { MatTableModule } from '@angular/material/table';\n import { MatTabsModule } from '@angular/material/tabs';\n import { MatToolbarModule } from '@angular/material/toolbar';\n import { MatTooltipModule } from '@angular/material/tooltip';\n import { MatStepperModule } from '@angular/material/stepper';\n import { MatBadgeModule } from '@angular/material/badge';\n import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\n import { MatBottomSheetModule } from '@angular/material/bottom-sheet';\n \n import { CdkTableModule } from '@angular/cdk/table';\n import { CdkAccordionModule } from '@angular/cdk/accordion';\n import { A11yModule } from '@angular/cdk/a11y';\n import { BidiModule } from '@angular/cdk/bidi';\n import { OverlayModule } from '@angular/cdk/overlay';\n import { PlatformModule } from '@angular/cdk/platform';\n import { ObserversModule } from '@angular/cdk/observers';\n import { PortalModule } from '@angular/cdk/portal';\n \n /**\n  * NgModule that includes all Material modules that are required to serve the demo-app.\n  */\n @NgModule({\n     exports: [\n         MatAutocompleteModule,\n         MatButtonModule,\n         MatBottomSheetModule,\n         MatButtonToggleModule,\n         MatCardModule,\n         MatCheckboxModule,\n         MatChipsModule,\n         MatTableModule,\n         MatDatepickerModule,\n         MatDialogModule,\n         MatExpansionModule,\n         MatFormFieldModule,\n         MatGridListModule,\n         MatIconModule,\n         MatInputModule,\n         MatListModule,\n         MatMenuModule,\n         MatPaginatorModule,\n         MatProgressBarModule,\n         MatProgressSpinnerModule,\n         MatRadioModule,\n         MatRippleModule,\n         MatSelectModule,\n         MatBadgeModule,\n         MatSidenavModule,\n         MatSlideToggleModule,\n         MatSliderModule,\n         MatSnackBarModule,\n         MatSortModule,\n         MatStepperModule,\n         MatTabsModule,\n         MatToolbarModule,\n         MatTooltipModule,\n         MatNativeDateModule,\n         CdkTableModule,\n         A11yModule,\n         BidiModule,\n         CdkAccordionModule,\n         ObserversModule,\n         OverlayModule,\n         PlatformModule,\n         PortalModule\n     ]\n })\n export class MaterialModule { }\n ","import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  url = environment.apiUrl;\n\n  constructor(private httpClient:HttpClient) { }\n\n  //signup API call\n  signup(data:any){\n    return this.httpClient.post(this.url+\"/user/signup\",data,{\n      headers: new HttpHeaders().set('Content-Type',\"application/json\")\n    })\n  }\n\n  //forgot password\n  forgotPassword(data:any){\n    return this.httpClient.post(this.url+\"/user/forgotPassword/\",data,{\n      headers: new HttpHeaders().set('content-Type',\"application/json\")\n    })\n  }\n\n  //login\n  login(data:any){\n    return this.httpClient.post(this.url+\"/user/login/\",data,{\n      headers: new HttpHeaders().set('Content-Type',\"application/json\")\n    })\n  }\n\n  //checkToken\n  checkToken(){\n    return this.httpClient.get(this.url+\"/user/checkToken\");\n  }\n\n  changePassword(data:any):Observable<any>{\n    return this.httpClient.post(this.url + \"/user/changePassword\", data, {\n      headers: new HttpHeaders().set('Content-Type', \"application/json\")\n    });\n  }\n\n  getUsers(){\n    return this.httpClient.get(this.url+\"/user/get/\");\n  }\n\n  update(data:any){\n    return this.httpClient.patch(this.url+\"/user/update\",data,{\n      headers:new HttpHeaders().set('Content-Type',\"application/json\")\n    })\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n\n  signupForm:any = FormGroup;\n  responseMessage:any;\n\n  constructor(private formBuilder:FormBuilder,\n    private router:Router,\n    private userService:UserService,\n    private snackbarService:SnackbarService,\n    private dialogRef:MatDialogRef<SignupComponent>,\n    private ngxService: NgxUiLoaderService) { }\n\n  ngOnInit(): void {\n    this.signupForm = this.formBuilder.group({\n      name:[null,[Validators.required, Validators.pattern(GlobalConstants.nameRegex)]],\n      email:[null,[Validators.required, Validators.pattern(GlobalConstants.emailRegex)]],\n      contactNumber:[null,[Validators.required, Validators.pattern(GlobalConstants.contactNumberRegex)]],\n      password:[null,[Validators.required]]\n    })\n  }\n\n  handleSubmit(){\n    this.ngxService.start();\n\n    var formData = this.signupForm.value;\n    var data = {\n      name: formData.name,\n      email: formData.email,\n      contactNumber: formData.contactNumber,\n      password: formData.password\n    }\n\n    this.userService.signup(data).subscribe((response:any)=>{\n      this.ngxService.stop();\n      this.dialogRef.close();\n      this.responseMessage = response?.message;\n      this.snackbarService.openSnackBar(this.responseMessage,\"\");\n      this.router.navigate(['/']);    //navigate to same page\n    },(error)=>{\n      this.ngxService.stop();\n      if(error.error?.message){\n        this.responseMessage = error.error?.message;\n      }\n      else{\n        this.responseMessage = GlobalConstants.genericError;\n      }\n\n      this.snackbarService.openSnackBar(this.responseMessage,GlobalConstants.error);\n    })\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxlayout=\"row\">\n    <span class=\"title-center\">Signup</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"signupForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Name</mat-label>\n        <input matInput formControlName=\"name\" required>\n        <mat-error *ngIf=\"signupForm.controls.name.touched && signupForm.controls.name.invalid\">\n          <span *ngIf=\"signupForm.controls.name.errors.required\">This field is mandatory.</span>\n          <!-- <span *ngIf=\"signupForm.controls.name.errors.pattern\">This field is invalid.</span>    other caracter enter then shoe the error -->\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" required>\n        <mat-error *ngIf=\"signupForm.controls.email.touched && signupForm.controls.email.invalid\">\n          <span *ngIf=\"signupForm.controls.email.errors.required\">This field is mandatory.</span>\n          <!-- <span *ngIf=\"signupForm.controls.contactNumber.errors.pattern\">This field is invalid.</span>    other caracter enter then shoe the error -->\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Contact Number</mat-label>\n        <input matInput formControlName=\"contactNumber\" required>\n        <mat-error *ngIf=\"signupForm.controls.contactNumber.touched && signupForm.controls.contactNumber.invalid\">\n          <span *ngIf=\"signupForm.controls.contactNumber.errors.required\">This field is mandatory.</span>\n          <!-- <span *ngIf=\"signupForm.controls.contactNumber.errors.pattern\">This field is invalid.</span>    other caracter enter then shoe the error -->\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Password</mat-label>\n        <input matInput formControlName=\"password\" type=\"password\" required>\n        <mat-error *ngIf=\"signupForm.controls.password.touched && signupForm.controls.password.invalid\">\n          <span *ngIf=\"signupForm.controls.password.errors.required\">This field is mandatory.</span>\n          <!-- <span *ngIf=\"signupForm.controls.password.errors.pattern\">This field is invalid.</span>    other caracter enter then shoe the error -->\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"handleSubmit()\"\n  [disabled]=\"!(signupForm.valid && signupForm.dirty)\">Signup</button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { FullComponent } from './layouts/full/full.component';\nimport { RouteGuardService } from './services/route-guard.service';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  {\n    path: 'cafe',\n    component: FullComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: '/cafe/dashboard',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        loadChildren:\n          () => import('./material-component/material.module').then(m => m.MaterialComponentsModule),\n          canActivate:[RouteGuardService],\n          data:{\n            expectedRole:['admin','user']\n          }\n      },\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./dashboard/dashboard.module').then(m => m.DashboardModule),\n        canActivate:[RouteGuardService],\n          data:{\n            expectedRole:['admin','user']\n          }\n      }\n    ]\n  },\n  { path: '**', component: HomeComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { GlobalConstants } from '../shared/global-constants';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm:any = FormGroup;\n  responseMessage:any;\n\n  constructor(private formBuilder:FormBuilder,\n    private router:Router,\n    private userService:UserService,\n    public dialogRef:MatDialogRef<LoginComponent>,\n    private ngxService:NgxUiLoaderService,\n    private snackbarService:SnackbarService) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email:[null,[Validators.required,Validators.pattern(GlobalConstants.emailRegex)]],\n      password:[null,[Validators.required]]\n    })\n  }\n  handleSubmit(){\n    this.ngxService.start();\n\n    var formData = this.loginForm.value;\n    var data = {\n      email: formData.email,\n      password: formData.password\n    }\n    this.userService.login(data).subscribe((response:any)=>{\n      this.ngxService.stop();\n      this.dialogRef.close();\n\n      localStorage.setItem('token',response.token);  //store token in the localstorage that is visible in the inspect->Application\n      this.router.navigate(['/cafe/dashboard/']);\n    },(error)=>{\n      this.ngxService.stop();\n\n      if(error.error?.message){\n        this.responseMessage = error.error?.message;\n      }\n      else{\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.snackbarService.openSnackBar(this.responseMessage,GlobalConstants.error);\n    })\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row fxLayout=\"row\">\n    <span class=\"title-center\">Login</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"loginForm\">\n    <div fxFlex fxLayout=\"column\">\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" required>\n        <mat-error *ngIf=\"loginForm.controls.email.touched && loginForm.controls.email.invalid\">\n          <span *ngIf=\"loginForm.controls.email.errors.required\">This field is mandatory</span>\n          <!-- <span *ngIf=\"loginForm.controls.email.error.pattern\">This field is invalid</span> -->\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" fxFlex>\n        <mat-label>Password</mat-label>\n        <input matInput formControlName=\"password\" type=\"password\" required>\n        <mat-error *ngIf=\"loginForm.controls.password.touched && loginForm.controls.password.invalid\">\n          <span *ngIf=\"loginForm.controls.password.errors.required\">This field mandatory</span>\n          <!-- <span *ngIf=\"loginForm.controls.password.erros.pattern\">This field is invalid</span> -->\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n  <button mat-raised-button color=\"primary\"  type=\"submit\" (click)=\"handleSubmit()\"\n  [disabled]=\"!(loginForm.valid && loginForm.dirty)\">Login</button>\n  <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\n</mat-dialog-actions>\n","import { Component } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ChangePasswordComponent } from 'src/app/material-component/dialog/change-password/change-password.component';\nimport { ConfirmationComponent } from 'src/app/material-component/dialog/confirmation/confirmation.component';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: []\n})\nexport class AppHeaderComponent {\n  role: any;\n  constructor(private router: Router,\n    private dialog: MatDialog) {\n\n  }\n\n  logout(){\n    const dialogConfig = new MatDialogConfig;\n    dialogConfig.data = {\n      message: 'Logout'\n    };\n    const dialogRef = this.dialog.open(ConfirmationComponent,dialogConfig);\n    const sub = dialogRef.componentInstance.onEmitStatusChange.subscribe((user)=>{\n      dialogRef.close();\n      localStorage.clear();\n      this.router.navigate(['/']);\n    })\n  }\n\n  changePassword(){\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = \"550px\";\n    this.dialog.open(ChangePasswordComponent,dialogConfig);\n  }\n}\n","<button [matMenuTriggerFor]=\"profile\" mat-icon-button class=\"m-r-5\">\n    <mat-icon>account_circle</mat-icon>\n</button>\n<mat-menu #profile=\"matMenu\" class=\"mymegamenu\">\n  <button mat-menu-item (click)=\"changePassword()\">\n    <mat-icon>password</mat-icon>Change Password\n  </button>\n  <button mat-menu-item (click)=\"logout()\">\n    <mat-icon>exit_to_app</mat-icon>Sign Out\n  </button>\n</mat-menu>\n","import { Directive, HostListener, Inject } from '@angular/core';\n\nimport { AccordionLinkDirective } from './accordionlink.directive';\n\n@Directive({\n  selector: '[appAccordionToggle]'\n})\nexport class AccordionAnchorDirective {\n  protected navlink: AccordionLinkDirective;\n\n  constructor(@Inject(AccordionLinkDirective) navlink: AccordionLinkDirective) {\n    this.navlink = navlink;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(e: any) {\n    this.navlink.toggle();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}